{
  "name": "Hyperpuzzlescript",
  "version": "v1.0.0",
  "fileTypes": [
    "hps"
  ],
  "uuid": "cf6eb986-7d95-4181-9e06-9f93118c8937",
  "scopeName": "source.hps",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#statements"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#punctuation"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.block.documentation.hps",
          "begin": "/\\*\\*(?![/|\\*])",
          "end": "\\*/",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.block.documentation.hps"
            }
          },
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        },
        {
          "name": "comment.block.hps",
          "begin": "/\\*",
          "end": "\\*/",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.block.hps"
            }
          },
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        },
        {
          "name": "comment.line.documentation.hps",
          "match": "(///)[^/].*$\\n?",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.documentation.hps"
            }
          }
        },
        {
          "name": "comment.line.double-slash.hps",
          "match": "(//).*$\\n?",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.double-slash.hps"
            }
          }
        }
      ]
    },
    "ident": {
      "patterns": [
        {
          "name": "variable.language.self.hps",
          "match": "\\b(self)\\b"
        },
        {
          "name": "support.constant.math",
          "match": "\\b(pi|tau|phi)\\b"
        },
        {
          "name": "variable.other.readwrite.hps",
          "match": "[A-Za-z_][0-9A-Za-z_]*"
        }
      ]
    },
    "parameter-list": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.begin.hps"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.end.hps"
        }
      },
      "patterns": [
        {
          "name": "meta.type.annotation.hps",
          "match": "(:\\s_*[^,]*)",
          "captures": {
            "0": {
              "patterns": [
                {
                  "include": "#types"
                }
              ]
            }
          }
        },
        {
          "include": "#keywords"
        },
        {
          "name": "variable.parameter.function.hps",
          "match": "[A-Za-z_][0-9A-Za-z_]*"
        },
        {
          "name": "punctuation.separator.parameter.function.hps",
          "match": "\\,"
        }
      ]
    },
    "statements": {
      "patterns": [
        {
          "match": "meow",
          "name": "invalid.illegal.meow"
        },
        {
          "include": "#fn-statements"
        },
        {
          "include": "#use-statements"
        },
        {
          "include": "#import-statements"
        },
        {
          "include": "#export-statements"
        },
        {
          "include": "#expressions"
        }
      ]
    },
    "expressions": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#fn-expr"
        },
        {
          "include": "#block-expr"
        },
        {
          "include": "#namespace-access"
        },
        {
          "include": "#fn-call-expr"
        },
        {
          "include": "#literals"
        },
        {
          "include": "#ident"
        },
        {
          "include": "#operators"
        }
      ]
    },
    "use-statements": {
      "patterns": [
        {
          "name": "meta.use.hps",
          "match": "(use)((?:[^\\n]|\\([^)]*\\))*)",
          "captures": {
            "1": {
              "name": "storage.type.use.hps"
            },
            "2": {
              "patterns": [
                {
                  "name": "storage.type.use.hps",
                  "match": "\\b(from|as)\\b"
                }
              ]
            }
          }
        }
      ]
    },
    "import-statements": {
      "patterns": [
        {
          "name": "meta.import.hps",
          "match": "(import)((?:[^\\n]|\\([^)]*\\))*)",
          "captures": {
            "1": {
              "name": "keyword.control.import.hps"
            },
            "2": {
              "patterns": [
                {
                  "name": "keyword.control.import.hps",
                  "match": "\\b(from|as)\\b"
                }
              ]
            }
          }
        }
      ]
    },
    "export-statements": {
      "patterns": [
        {
          "name": "meta.export.hps",
          "match": "(export)\\s+([^\\s]+)(?:\\n|\\s*([^0-9A-Za-z\\s]+))",
          "captures": {
            "1": {
              "name": "keyword.control.flow.export.hps"
            },
            "2": {
              "patterns": [
                {
                  "include": "#ident"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "name": "keyword.operator.assignment.hps",
                  "match": "(?x)  =(?![=>])"
                },
                {
                  "name": "invalid.illegal.assignment.augmented.hps",
                  "match": "(?x)  \\*\\*=\n  | <<=\n  | >>=\n  | \\?\\?=\n  | \\+=\n  | -=\n  | (?<!\\*)\\*=\n  | /=\n  | %=\n  | &=\n  | \\|=\n  | \\^="
                }
              ]
            }
          }
        },
        {
          "name": "meta.export.hps",
          "match": "(export)((?:[^\\n]|\\([^)]*\\))*)",
          "captures": {
            "1": {
              "name": "keyword.control.flow.export.hps"
            },
            "2": {
              "patterns": [
                {
                  "name": "keyword.control.flow.export.hps",
                  "match": "\\b(from|as)\\b"
                }
              ]
            }
          }
        }
      ]
    },
    "fn-statements": {
      "patterns": [
        {
          "name": "meta.function.hps",
          "begin": "(?:(export)\\s+)?(fn)\\s*([^\\(]*)(\\([^\\)]*\\))\\s*(->\\s*[^{]*)?\\{?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.flow.export.hps"
            },
            "2": {
              "name": "storage.type.function.hps"
            },
            "3": {
              "patterns": [
                {
                  "name": "entity.name.function.hps",
                  "match": "[A-Za-z_][0-9A-Za-z_]*"
                }
              ]
            },
            "4": {
              "patterns": [
                {
                  "include": "#parameter-list"
                }
              ]
            },
            "5": {
              "patterns": [
                {
                  "include": "#types"
                }
              ]
            }
          },
          "end": "\\}",
          "patterns": [
            {
              "include": "#statements"
            }
          ]
        }
      ]
    },
    "fn-expr": {
      "patterns": [
        {
          "name": "meta.function.hps",
          "begin": "(fn)\\s*(\\([^\\)]*\\))\\s*(->\\s*[^{]*)?\\{?",
          "beginCaptures": {
            "1": {
              "name": "storage.type.function.hps"
            },
            "2": {
              "patterns": [
                {
                  "include": "#parameter-list"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#types"
                }
              ]
            }
          },
          "end": "\\}",
          "patterns": [
            {
              "include": "#statements"
            }
          ]
        }
      ]
    },
    "block-expr": {
      "name": "meta.block.hps",
      "begin": "(?<!#)\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.hps"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.hps"
        }
      },
      "patterns": [
        {
          "include": "#expressions"
        }
      ]
    },
    "fn-call-expr": {
      "name": "meta.function-call.hps",
      "begin": "(?!for)([A-Za-z_][0-9A-Za-z_]*)\\s*\\(",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "name": "entity.name.function.hps",
              "match": "[A-Za-z_][0-9A-Za-z_]*"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#expressions"
        }
      ]
    },
    "literals": {
      "patterns": [
        {
          "include": "#literal-number"
        },
        {
          "include": "#literal-bool"
        },
        {
          "include": "#literal-null"
        },
        {
          "include": "#literal-string"
        },
        {
          "include": "#literal-map"
        },
        {
          "include": "#literal-list"
        }
      ]
    },
    "literal-number": {
      "patterns": [
        {
          "include": "#number-float"
        },
        {
          "include": "#number-hex"
        },
        {
          "include": "#number-oct"
        },
        {
          "include": "#number-bin"
        },
        {
          "include": "#number-dec"
        }
      ]
    },
    "number-dec": {
      "name": "constant.numeric.hps",
      "match": "\\b[1-9][_0-9]*\\b"
    },
    "number-float": {
      "name": "constant.numeric.hps",
      "match": "\\b[0-9][0-9_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?\\b"
    },
    "literal-bool": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.hps",
          "match": "\\btrue\\b"
        },
        {
          "name": "constant.language.boolean.false.hps",
          "match": "\\bfalse\\b"
        }
      ]
    },
    "literal-null": {
      "patterns": [
        {
          "name": "constant.language.null.hps",
          "match": "\\bnull\\b"
        }
      ]
    },
    "literal-string": {
      "patterns": [
        {
          "name": "string.quoted.double.hps",
          "begin": "(\")",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.hps"
            }
          },
          "end": "(\")",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.hps"
            }
          },
          "patterns": [
            {
              "name": "meta.template.expression.hps",
              "begin": "(?!<\\\\)\\$\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.template-expression.begin.hps"
                }
              },
              "end": "\\}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.template-expression.end.hps"
                }
              },
              "patterns": [
                {
                  "include": "#expressions"
                }
              ]
            },
            {
              "include": "#str-content"
            }
          ]
        }
      ]
    },
    "str-content": {
      "patterns": [
        {
          "name": "constant.character.escape.hps",
          "match": "\\\\[!-/:-@\\[-`{-~n]"
        },
        {
          "name": "invalid.illegal.escape.hps",
          "match": "\\\\[^!-/:-@\\[-`{-~n]"
        }
      ]
    },
    "literal-map": {
      "name": "meta.map-literal.hps",
      "begin": "#\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.map.begin.hps"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.map.end.hps"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#map-field"
        }
      ]
    },
    "map-field": {
      "name": "meta.map.field.hps",
      "begin": "([^:]+)(:)",
      "beginCaptures": {
        "1": {
          "name": "meta.map-literal.key.hps"
        }
      },
      "end": "(?=\\})|(?=,)",
      "patterns": [
        {
          "include": "#expressions"
        }
      ]
    },
    "literal-list": {
      "name": "meta.list-literal.hps",
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.list.begin.hps"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.list.end.hps"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#expressions"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "entity.name.type.unknown.hps",
          "match": "\\bAny\\b"
        },
        {
          "name": "entity.name.type.primitive.hps",
          "match": "\\b(Null|Bool|Num|Str|List|Map|Fn|Vector)\\b"
        },
        {
          "name": "support.type.hps",
          "match": "\\b(Point|Transform|Plane|Region)\\b"
        },
        {
          "name": "support.type.hps",
          "match": "\\b(Blade1|Blade2|Blade3|Antiscalar|Region)\\b"
        },
        {
          "name": "support.type.hps",
          "match": "\\b(Color|Axis|Twist|AxisSystem|TwistSystem|Puzzle)\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "storage.type.hps",
          "match": "\\b(fn|use)\\b"
        },
        {
          "name": "keyword.control.flow.hps",
          "match": "\\b(return)\\b"
        },
        {
          "name": "keyword.control.conditional.hps",
          "match": "\\b(if|else)\\b"
        },
        {
          "name": "keyword.control.loop.hps",
          "match": "\\b(for|in|do|while|break|continue)\\b"
        },
        {
          "name": "variable.language.self.hps",
          "match": "\\b(self)\\b"
        },
        {
          "name": "keyword.control.import.hps",
          "match": "\\b(import)\\b"
        },
        {
          "name": "keyword.control.flow.hps",
          "match": "\\b(use)\\b"
        },
        {
          "name": "keyword.numeric.hps",
          "match": "\\b(inf)\\b"
        },
        {
          "name": "keyword.operator.logical.hps",
          "match": "\\b(and|or|xor|not|is)\\b"
        },
        {
          "name": "invalid.illegal.operator.hps",
          "match": "\\b(from|as)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.logical.hps",
          "match": "(?x)  !(?!=)\n  | \\&\\&\n  | \\|\\|"
        },
        {
          "name": "keyword.operator.coalesce.hps",
          "match": "\\?\\?"
        },
        {
          "name": "keyword.operator.assignment.hps",
          "match": "(?x)  =(?![=>])"
        },
        {
          "name": "keyword.operator.assignment.augmented.hps",
          "match": "(?x)  \\*\\*=\n  | <<=\n  | >>=\n  | \\?\\?=\n  | \\+=\n  | -=\n  | (?<!\\*)\\*=\n  | /=\n  | %=\n  | &=\n  | \\|=\n  | \\^="
        },
        {
          "name": "keyword.operator.bitwise.hps",
          "match": "(?x)  <<\n  | >>\n  | &\n  | \\^\n  | \\|\n  | ~"
        },
        {
          "name": "keyword.operator.relational.hps",
          "match": "(?x)  <=\n  | >=\n  | <(?![-=])\n  | (?<![-=])>"
        },
        {
          "name": "keyword.operator.comparison.hps",
          "match": "(?x)  ==(?!=)\n  | !=(?!=)"
        },
        {
          "name": "keyword.operator.arithmetic.hps",
          "match": "(?x)  /\n  | %\n  | \\*\\*\n  | \\*(?!\\))\n  | \\+(?!\\+)\n  | -(?![>-])\n  | \\.\\|\n  | \\|\\."
        },
        {
          "name": "keyword.operator.range.hps",
          "match": "(?x)  \\.\\.(?![\\.=]) |\n  \\.\\.="
        },
        {
          "name": "keyword.operator.accessor.hps punctuation.accessor.hps",
          "match": "(?x)  \\.(?!\\.) |\n  \\?\\."
        },
        {
          "name": "punctuation.separator.switch.case.hps",
          "match": "=>"
        },
        {
          "name": "invalid.illegal.operator.hps",
          "match": "(\\(\\*|\\*\\)|\\+\\+|--|\\.\\.\\.+|~|#(?!{)|@|\\?|\\$(?!{)|->|<-|===|!==|\\:=|\\:\\:<)"
        },
        {
          "name": "invalid.illegal.operator.hps",
          "match": "->"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "meta.delimiter.comma.hps",
          "match": ","
        },
        {
          "name": "invalid.illegal.delimiter.hps",
          "match": ";"
        }
      ]
    }
  }
}
