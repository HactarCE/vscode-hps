# yaml-language-server: $schema=https://raw.githubusercontent.com/Septh/tmlanguage/master/tmLanguage.schema.json
name: Hyperpuzzlescript
version: v1.0.0
fileTypes:
  - hps
uuid: cf6eb986-7d95-4181-9e06-9f93118c8937
scopeName: source.hps
patterns:
  - include: "#statements"
repository:
  comments:
    patterns:
      - name: comment.block.documentation.hps
        begin: /\*\*(?![/|\*])
        end: \*/
        captures:
          "0":
            name: punctuation.definition.comment.block.documentation.hps
        patterns:
          - include: "#comments"
      - name: comment.block.hps
        begin: /\*
        end: \*/
        captures:
          "0":
            name: punctuation.definition.comment.block.hps
        patterns:
          - include: "#comments"
      - name: comment.line.documentation.hps
        match: (///)[^/].*$
        captures:
          "1":
            name: punctuation.definition.comment.documentation.hps
      - name: comment.line.double-slash.hps
        match: (//).*$
        captures:
          "1":
            name: punctuation.definition.comment.double-slash.hps
  ident:
    patterns:
      - name: variable.language.self.hps
        match: \b(self)\b
      - name: support.constant.math
        match: \b(pi|π|tau|τ|phi|φ|deg|inf|∞)\b
      - name: invalid.illegal.reserved
        match: \b(null|true|false|if|else|do|while|for|in|continue|break|return|use|import|export|fn|mut|from|as|is|and|or|xor|not)\b
      - name: variable.other.readwrite.hps
        match: "[A-Za-z_][0-9A-Za-z_]*"
  statements:
    patterns:
      - include: "#comments"
      - include: "#use-statement"
      - include: "#export-statement"
      - include: "#expressions"
  expressions:
    patterns:
      - include: "#comments"
      - include: "#keywords"
      - include: "#fn-definition"
      - include: "#statement-block"
      - include: "#namespace-access"
      - include: "#fn-call-expr"
      - include: "#literals"
      - include: "#ident"
      - include: "#operators"
      - include: "#punctuation"
  use-statement:
    patterns:
      - name: meta.use.hps
        begin: \b(use)\b
        beginCaptures:
          "0": { name: storage.type.use.hps }
        end: (?=[\n}])
        patterns:
          - name: storage.type.glob.hps
            match: \*
          - name: storage.type.as.hps
            match: \b(as)\b
          - name: storage.type.from.hps
            match: \b(from)\b
          - include: "#expressions"
  export-statement:
    patterns:
      - name: meta.export.hps
        begin: \b(export)\b
        beginCaptures:
          "0": { name: keyword.control.flow.use.hps }
        end: (?=[\n}])
        patterns:
          - name: keyword.control.flow.glob.hps
            match: \*
          - name: keyword.control.flow.as.hps
            match: \b(as)\b
          - name: keyword.control.flow.from.hps
            match: \b(from)\b
          - name: invalid.illegal.assignment.augmented.hps
            match: |-
              (?x)  \*\*=
                | <<=
                | >>=
                | \?\?=
                | \+=
                | -=
                | (?<!\*)\*=
                | /=
                | %=
                | &=
                | \|=
                | \^=
          - include: "#expressions"
  fn-definition:
    patterns:
      - name: meta.function.hps
        begin: (?:\b(export)\b\s+)?\b(fn)\b([^\(]*)
        beginCaptures:
          "1":
            name: storage.modifier.visibility.export.hps
          "2":
            name: storage.type.function.hps
          "3":
            patterns:
              - name: entity.name.function.hps
                match: "[A-Za-z_][0-9A-Za-z_]*"
        end: \}
        patterns:
          - include: "#statements"
  statement-block:
    name: meta.block.statements.hps
    begin: (?<!#)\{
    beginCaptures:
      "0":
        name: punctuation.definition.block.hps
    end: \}
    endCaptures:
      "0":
        name: punctuation.definition.block.hps
    patterns:
      - include: "#statements"
  fn-call-expr:
    name: meta.function-call.hps
    begin: (?!for)([A-Za-z_][0-9A-Za-z_]*)\s*\(
    end: \)
    beginCaptures:
      "1":
        patterns:
          - name: entity.name.function.hps
            match: "[A-Za-z_][0-9A-Za-z_]*"
    patterns:
      - include: "#expressions"

  literals:
    patterns:
      - include: "#literal-number"
      - include: "#literal-bool"
      - include: "#literal-null"
      - include: "#literal-string"
      - include: "#literal-map"
      - include: "#literal-list"
      - include: "#literal-path"
  literal-number:
    patterns:
      - include: "#number-float"
      - include: "#number-hex"
      - include: "#number-oct"
      - include: "#number-bin"
      - include: "#number-dec"
  number-dec:
    name: constant.numeric.hps
    match: \b[1-9][_0-9]*\b
  # number-bin:
  #   name: constant.numeric.hps
  #   match: \b0b[0-1][_0-1]*\b
  # number-oct:
  #   name: constant.numeric.hps
  #   match: \b0o[0-7][0-7]*\b
  # number-hex:
  #   name: constant.numeric.hps
  #   match: \b0x[0-9a-fA-F][_0-9a-fA-F]*\b
  number-float:
    name: constant.numeric.hps
    match: \b[0-9][0-9_]*(\.[0-9_]+)?([eE][+-]?[0-9_]+)?\b
  literal-bool:
    patterns:
      - name: constant.language.boolean.true.hps
        match: \btrue\b
      - name: constant.language.boolean.false.hps
        match: \bfalse\b
  literal-null:
    patterns:
      - name: constant.language.null.hps
        match: \bnull\b
  literal-string:
    patterns:
      - name: string.quoted.double.hps
        begin: (")
        beginCaptures:
          "0": { name: punctuation.definition.string.begin.hps }
        end: (")
        endCaptures:
          "0": { name: punctuation.definition.string.end.hps }
        patterns:
          - name: meta.template.expression.hps
            begin: (?!<\\)\$\{
            beginCaptures:
              "0":
                name: punctuation.definition.template-expression.begin.hps
            end: \}
            endCaptures:
              "0":
                name: punctuation.definition.template-expression.end.hps
            patterns:
              - include: "#expressions"
          - include: "#str-content"
  str-content:
    patterns:
      - name: constant.character.escape.hps
        match: \\[!-/:-@\[-`{-~n]
      - name: invalid.illegal.escape.hps
        match: \\[^!-/:-@\[-`{-~n]
  literal-map:
    name: meta.map-literal.hps
    begin: "#\\{"
    beginCaptures:
      "0": { name: punctuation.definition.map.begin.hps }
    end: \}
    endCaptures:
      "0": { name: punctuation.definition.map.end.hps }
    patterns:
      - include: "#expressions"
  literal-list:
    name: meta.list-literal.hps
    begin: \[
    beginCaptures:
      "0": { name: punctuation.definition.list.begin.hps }
    end: \]
    endCaptures:
      "0": { name: punctuation.definition.list.end.hps }
    patterns:
      - include: "#expressions"
  literal-path:
    name: constant.language.path.hps
    match: "@\\^*([/a-zA-Z0-9_]+)*"

  types:
    patterns:
      - name: entity.name.type.unknown.hps
        match: \bAny\b
      - name: entity.name.type.primitive.hps
        match: \b(Null|Bool|Num|Str|List|Map|Fn|Int|Nat|EmptyList|NonEmptyList|Vec|Type)\b # general
      - name: support.type.hps
        match: \b(Point|Transform|Plane|Region)\b # euclid
      - name: support.type.hps
        match: \b(Blade1|Blade2|Blade3|Antiscalar)\b # cga2d
      - name: support.type.hps
        match: \b(Color|Axis|Twist|AxisSystem|TwistSystem|Puzzle)\b # puzzle

  keywords:
    patterns:
      - include: "#types"
      - name: storage.hps
        match: \b(fn)\b
      - name: storage.modifier.visibility.export.hps
        match: \b(export)\b
      - name: keyword.control.use.hps
        match: \b(use)\b
      - name: keyword.control.flow.hps
        match: \b(return)\b
      - name: keyword.control.conditional.hps
        match: \b(if|else)\b
      - name: keyword.control.loop.hps
        match: \b(for|in|do|while|break|continue)\b
      - name: keyword.operator.logical.hps
        match: \b(and|or|xor|not|is)\b
      - name: keyword.control.flow.hps
        match: \b(with)\b
      - name: variable.language.hps
        match: "#(ndim|sym)\\b"
      - name: invalid.illegal.operator.hps
        match: \b(from|as)\b
  operators:
    patterns:
      - name: keyword.operator.logical.hps
        match: |-
          (?x)  !(?!=)
            | \&\&
            | \|\|
      - name: keyword.operator.coalesce.hps
        match: \?\?
      - name: keyword.operator.assignment.hps
        match: (?x)  =(?![=>])
      - name: keyword.operator.assignment.augmented.hps
        match: |-
          (?x)  \*\*=
            | <<=
            | >>=
            | \?\?=
            | \+\+=
            | \+=
            | -=
            | (?<!\*)\*=
            | /=
            | %=
            | &=
            | \|=
            | \^=
      - name: keyword.operator.bitwise.hps
        match: |-
          (?x)  <<
            | >>
            | &
            | \^
            | \|
            | ~
      - name: keyword.operator.relational.hps
        match: |-
          (?x)  <=
            | >=
            | <(?![-=])
            | (?<![-=])>
      - name: keyword.operator.comparison.hps
        match: |-
          (?x)  ==(?!=)
            | !=(?!=)
      - name: keyword.operator.arithmetic.hps
        match: |-
          (?x)  /
            | %
            | \*\*
            | \*(?!\))
            | \+\+
            | \+(?!\+)
            | -(?![>-])
            | \.\|
            | \|\.
            | √
      - name: keyword.operator.range.hps
        match: |-
          (?x)  \.\.(?![\.=]) |
            \.\.=
      - name: keyword.operator.accessor.hps punctuation.accessor.hps
        match: |-
          (?x)  \.(?!\.) |
            \?\.
      - name: punctuation.separator.switch.case.hps
        match: =>
      - name: punctuation.operator.arrow.hps
        match: ->
      - name: invalid.illegal.operator.hps
        match: (\.\.\.+|~|@|\?|\$(?!{)|<-|===|!==|\:=|\:\:<)
      - name: punctuation.separator.colon.hps
        match: ":"
  punctuation:
    patterns:
      - name: meta.delimiter.comma.hps
        match: ","
      - name: invalid.illegal.delimiter.hps
        match: ";"
